<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[LaTex]]></title>
    <url>%2F2019%2F09%2F04%2FLaTex%2F</url>
    <content type="text"><![CDATA[LaTex[TOC] LaTex预备知识1.1 第一个LaTex文档123456\documentclass&#123;article&#125; \begin&#123;document&#125;First document. This is a simple example, with no extra parameters or packages included.\end&#123;document&#125; 第一行说明文档类型，在\begin{document} \end{document}标签之间编写文档的文本。 article 排版科技期刊、短报告、程序文档、邀请函等。 report 排版多章节的长报告、短篇的书籍、博士论文等。 book 排版书籍。 slides 排版幻灯片。 1.2 序言123456\documentclass[12pt, letterpaper]&#123;article&#125;\usepackage[utf8]&#123;inputenc&#125; \title&#123;First document&#125;\author&#123;Hubert Farnsworth \thanks&#123;funded by the ShareLaTeX team&#125;&#125;\date&#123;February 2014&#125; 在\begin{document}命令之前输入的文本称为前导码。在序言中，您可以定义要编写的文档类型和语言，加载您需要的额外包，并设置几个参数 。 下面对各部分进行说明： \documentclass[12pt, letterpaper]{article} ：在示例中，额外参数设置字体大小（12pt）和纸张大小（letterpaper）。默认大小为10pt。纸张尺寸默认为A4 \usepackage[utf8]{inputenc} ：如果不是特别需要其他编码，将此行添加到前导码中 接下来的三行是自我描述的 。如果要让标题显示，可以通过\maketitle来达到 1.3 斜体 粗体 下划线斜体：\textit{ } 粗体：\textbf{ } 下划线：\underline{ } 1.4 换行 分页 水平空格 垂直空格换行(新的一行会顶格开始) \\ \newline \hfile \break 分页 \newpage：在图片插入后换页，即图片依然可以正常显示，文本换页 \clearpage：在图片显示前换页，即图片和文本也会换页 水平空格 \hspace{ }：填指定长度空白 \hfill：填空白到行最后 垂直空格 \vspace{ }：填指定长度空白 \vfill：填空白到页面底部 段落2.1 新段落 空一行 段末 \par 1234This is the text in first paragraph. This is the text in first paragraph. This is the text in first paragraph. \parThis is the text in second paragraph. This is the text in second paragraph. This is the text in second paragraph. 2.2 居中 左对齐 右对齐左对齐示例 1234567\begin&#123;flushleft&#125;``LaTeX is a document preparation system and document markup language. LaTeX uses the TeX typesetting program for formatting its output, and is itself written in the TeX macro language. LaTeX is not the name of a particular editing program, but refers to the encoding or tagging conventions that are used in LaTeX documents&quot;.\end&#123;flushleft&#125; 图片3.1 插入图片 Latex无法自行管理图像，因此我们需要使用graphicx包 \usepackage{graphicx} \includegraphics{universe} universe为图片名 3.2 图片路径图片路径有多种选择，最佳做法是将图形路径指定为相对于主.tex文件，例如将主.tex文件目录表示 ./ 12%Path relative to the main .tex file \graphicspath&#123; &#123;./images/&#125; &#125; 3.3 图片大小和旋转1\ includegraphics [ width = 3cm，height = 4cm ] &#123;lion-logo &#125; 长宽 1\ includegraphics [ width = \ textwidth ] &#123;universe &#125; 图片和文本等宽 1\ includegraphics [ scale = 1.2，angle = 45 ] &#123;lion-logo &#125; 缩放并旋转 1234567\begin&#123;document&#125; Overleaf is a great professional tool to edit online, share and backup your \LaTeX&#123;&#125; projects. Also offers a rather large help documentation. \includegraphics[scale=1.2, angle=45]&#123;lion-logo&#125; 123456\begin&#123;document&#125; The universe is immense and it seems to be homogeneous, in a large scale, everywhere we look at. \includegraphics[width=\textwidth]&#123;universe&#125; 3.4 图片与文字的组合123456In the next example the figure will be positioned right below this sentence. \begin&#123;figure&#125;[h]\includegraphics[width=8cm]&#123;Plot&#125;\end&#123;figure&#125; 该figure环境用于将图片显示为文档中的浮动元素 ，LaTex会自动对图片进行定位 h T 位于页面顶部 b 位于页面底部 文本包裹图片，适合图片较小的情况下 12345678910111213141516171819202122232425262728293031\begin&#123;wrapfigure&#125;&#123;r&#125;&#123;0.25\textwidth&#125; %this figure will be at the right \centering \includegraphics[width=0.25\textwidth]&#123;mesh&#125;\end&#123;wrapfigure&#125; There are several ways to plot a function of two variables, depending on the information you are interested in. For instance, if you want to see the mesh of a function so it easier to see the derivative you can use a plot like the one on the left. \begin&#123;wrapfigure&#125;&#123;l&#125;&#123;0.25\textwidth&#125; \centering \includegraphics[width=0.25\textwidth]&#123;contour&#125;\end&#123;wrapfigure&#125; On the other side, if you are only interested oncertain values you can use the contour plot, you can use the contour plot, you can use the contour plot, you can use the contour plot, you can use the contour plot, you can use the contour plot, you can use the contour plot, like the one on the left. On the other side, if you are only interested on certain values you can use the contour plot, you can use the contour plot, you can use the contour plot, you can use the contour plot, you can use the contour plot, you can use the contour plot, you can use the contour plot, like the one on the left. 要实现如下图效果，需要先导入包wrapfig，即 \usepackage{wrapfig} 通过命令定义wrapfigure环境\begin{wrapfigure}{l}{0.25\textwidth} \end{wrapfigure} \centering 将使图片居中 {l}：定义图片的对齐方式 {0.25\textwidth}：图片相对于文本的宽度 效果图 示例1数学表达式数学表达式的写入模式有2种：inline mode ，display mode 。第一个用于编写作为文本一部分的公式。第二个用于编写不属于文本或段落的表达式 。 inline mode(行内模式)：用这些分隔符之一：\( \)，$ $或\begin{math} \end{math} display mode (行内模式）：\[ \], $$ $$, \begin{displaymath} \end{displaymath} or \begin{equation} \end{equation} 有编号 \begin{equation} \end{equation} (没试过) 无编号 参考文献5.1章节\section{}标记新部分的开头，在括号内设置标题，部分编号是自动的，可以禁用 。在左大括号前添加*即可去掉编号 1234567891011121314\section&#123;Introduction&#125; This is the first section. Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortisfacilisis sem. Nullam nec mi et neque pharetra sollicitudin. Praesent imperdietmi nec ante. Donec ullamcorper, felis non sodales... \section&#123;Second Section&#125; Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Etiam lobortis facilisissem. Nullam nec mi et neque pharetra sollicitudin. Praesent imperdiet mi necante... ​]]></content>
      <tags>
        <tag>LaTex</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker学习（1）]]></title>
    <url>%2F2019%2F07%2F17%2Fdocker1%2F</url>
    <content type="text"><![CDATA[docker学习（1）最近在学docker相关的东西，正好写几篇博客巩记录下。 docker背景一款产品从开发到上线，从操作系统，到运行环境，再到应用配置 。因而当从一台电脑部署到另一台电脑时，环境配置会很麻烦，什么都要重来一次，费力费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。 docker三要素用一张总的架构图来有一个直观的了解。Docker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就似乎 image镜像文件。只有通过这个镜像文件才能生成 Docker 容器。image 文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。 镜像（docker images）Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。 容器（container）Docker 利用容器（Container）独立运行的一个或一组应用。容器是用镜像创建的运行实例 。一个镜像可以创建多个容器。 仓库（registery）仓库（Repository）是集中存放镜像文件的场所。 例如dockerhub就是最大的docker仓库。 docker优点docker优点简洁来说就是：“一次封装，多出运行”。用户只要配置好了环境，换到别的电脑上直接部署就完事了，很方便。]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker1</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇博客]]></title>
    <url>%2F2019%2F07%2F14%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[奶奶级next主题的美化教学动态背景的设置执行git clone https://github.com/theme-next/theme-next-three 进入主题的config.yml文件修改three:,enable: true，(可以选择的),例如canvas_nest等，进入_config.yml文件可以看上面的说明，会告诉你需要的依赖，clone下来，设为true即可，当然空格问题要注意哦。 最后hexo clean hexo g hexo s三部曲一下 配置daovoice在线聊天功能进入daovoice官网，注册注册成功后，进入后台控制台，进入到 应用设置--&gt;安装到网站 页面，可以得到一个 app_id 进入themes/next/layout/_partials/head.swig 文件中添加如下代码，位置随意：123456789&#123;% if theme.daovoice %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;) daovoice(&apos;init&apos;, &#123; app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot; &#125;); daovoice(&apos;update&apos;); &lt;/script&gt;&#123;% endif %&#125; 在主题配置文件 _config.yml，添加如下代码 : 123# Online contact daovoice: truedaovoice_app_id: 这里输入前面获取的app_id 注意：添加成功后的图标可能和以后加入的例如比例图标重合，此时可以到聊天设置，修改下按钮的位置: 2.3进入themes/next/layout/_partials/head.swig 文件中添加如下代码，位置随意：]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>next第一篇教学</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F07%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
